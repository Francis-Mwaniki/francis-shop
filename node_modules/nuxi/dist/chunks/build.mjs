import { r as resolve } from '../shared/nuxi.22378a76.mjs';
import { c as consola } from '../shared/nuxi.9bc4d980.mjs';
import { w as writeTypes } from '../shared/nuxi.8cc48d8e.mjs';
import { l as loadKit } from '../shared/nuxi.71bafe5d.mjs';
import { c as clearDir } from '../shared/nuxi.da7ea8d0.mjs';
import { o as overrideEnv } from '../shared/nuxi.6840794e.mjs';
import { a as showVersions } from '../shared/nuxi.bc84e34d.mjs';
import { d as defineNuxtCommand } from '../shared/nuxi.b617cd0e.mjs';
import '../shared/nuxi.ccadf1fb.mjs';
import 'util';
import 'path';
import 'fs';
import 'os';
import 'tty';
import 'node:fs';
import '../shared/nuxi.e150c956.mjs';
import '../shared/nuxi.760576cb.mjs';
import 'node:module';
import 'node:url';
import 'assert';
import '../shared/nuxi.3d7f34cc.mjs';

const buildCommand = defineNuxtCommand({
  meta: {
    name: "build",
    usage: "npx nuxi build [--prerender] [rootDir]",
    description: "Build nuxt for production deployment"
  },
  async invoke(args) {
    overrideEnv("production");
    const rootDir = resolve(args._[0] || ".");
    showVersions(rootDir);
    const { loadNuxt, buildNuxt } = await loadKit(rootDir);
    const nuxt = await loadNuxt({
      rootDir,
      overrides: {
        _generate: args.prerender
      }
    });
    await clearDir(nuxt.options.buildDir);
    await writeTypes(nuxt);
    nuxt.hook("build:error", (err) => {
      consola.error("Nuxt Build Error:", err);
      process.exit(1);
    });
    await buildNuxt(nuxt);
  }
});

export { buildCommand as default };
