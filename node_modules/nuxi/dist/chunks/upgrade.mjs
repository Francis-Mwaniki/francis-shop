import { execSync } from 'node:child_process';
import { c as consola } from '../shared/nuxi.9bc4d980.mjs';
import { i as isAbsolute, r as resolve, j as join } from '../shared/nuxi.22378a76.mjs';
import { promises, statSync } from 'fs';
import 'path';
import { r as resolvePath } from '../shared/nuxi.3fe2942d.mjs';
import { g as getPackageManager, p as packageManagerLocks } from '../shared/nuxi.ed354171.mjs';
import { r as rmRecursive, t as touchFile } from '../shared/nuxi.da7ea8d0.mjs';
import { c as cleanupNuxtDirs, n as nuxtVersionToGitIdentifier } from '../shared/nuxi.2469c8e9.mjs';
import { d as defineNuxtCommand } from '../shared/nuxi.b617cd0e.mjs';
import '../shared/nuxi.ccadf1fb.mjs';
import 'util';
import 'os';
import 'tty';
import 'module';
import 'url';
import '../shared/nuxi.b6e8da95.mjs';
import 'assert';
import 'node:fs';

const defaultFindOptions = {
  startingFrom: ".",
  rootPattern: /^node_modules$/,
  reverse: false,
  test: (filePath) => {
    try {
      if (statSync(filePath).isFile()) {
        return true;
      }
    } catch {
    }
    return null;
  }
};
async function findFile(filename, _options = {}) {
  const options = { ...defaultFindOptions, ..._options };
  const basePath = resolve(options.startingFrom);
  const leadingSlash = basePath[0] === "/";
  const segments = basePath.split("/").filter(Boolean);
  if (leadingSlash) {
    segments[0] = "/" + segments[0];
  }
  let root = segments.findIndex((r) => r.match(options.rootPattern));
  if (root === -1) {
    root = 0;
  }
  if (!options.reverse) {
    for (let i = segments.length; i > root; i--) {
      const filePath = join(...segments.slice(0, i), filename);
      if (await options.test(filePath)) {
        return filePath;
      }
    }
  } else {
    for (let i = root + 1; i <= segments.length; i++) {
      const filePath = join(...segments.slice(0, i), filename);
      if (await options.test(filePath)) {
        return filePath;
      }
    }
  }
  throw new Error(`Cannot find matching ${filename} in ${options.startingFrom} or parent directories`);
}
function findNearestFile(filename, _options = {}) {
  return findFile(filename, _options);
}
async function readPackageJSON(id, opts = {}) {
  const resolvedPath = await resolvePackageJSON(id, opts);
  const blob = await promises.readFile(resolvedPath, "utf-8");
  return JSON.parse(blob);
}
async function resolvePackageJSON(id = process.cwd(), opts = {}) {
  const resolvedPath = isAbsolute(id) ? id : await resolvePath(id, opts);
  return findNearestFile("package.json", { startingFrom: resolvedPath, ...opts });
}

async function getNuxtVersion(path) {
  try {
    const pkg = await readPackageJSON("nuxt", { url: path });
    if (!pkg.version) {
      consola.warn("Cannot find any installed nuxt versions in ", path);
    }
    return pkg.version || null;
  } catch {
    return null;
  }
}
const upgrade = defineNuxtCommand({
  meta: {
    name: "upgrade",
    usage: "npx nuxi upgrade [--force|-f]",
    description: "Upgrade nuxt"
  },
  async invoke(args) {
    const rootDir = resolve(args._[0] || ".");
    const packageManager = getPackageManager(rootDir);
    if (!packageManager) {
      console.error("Cannot detect Package Manager in", rootDir);
      process.exit(1);
    }
    const packageManagerVersion = execSync(`${packageManager} --version`).toString("utf8").trim();
    consola.info("Package Manager:", packageManager, packageManagerVersion);
    const currentVersion = await getNuxtVersion(rootDir) || "[unknown]";
    consola.info("Current nuxt version:", currentVersion);
    if (args.force || args.f) {
      consola.info("Removing lock-file and node_modules...");
      const pmLockFile = resolve(rootDir, packageManagerLocks[packageManager]);
      await rmRecursive([pmLockFile, resolve(rootDir, "node_modules")]);
      await touchFile(pmLockFile);
    }
    consola.info("Installing latest Nuxt 3 RC...");
    execSync(`${packageManager} ${packageManager === "yarn" ? "add" : "install"} -D nuxt@rc`, { stdio: "inherit", cwd: rootDir });
    await cleanupNuxtDirs(rootDir);
    const upgradedVersion = await getNuxtVersion(rootDir) || "[unknown]";
    consola.info("Upgraded nuxt version:", upgradedVersion);
    if (upgradedVersion === currentVersion) {
      consola.success("You're already using the latest version of nuxt.");
    } else {
      consola.success("Successfully upgraded nuxt from", currentVersion, "to", upgradedVersion);
      const commitA = nuxtVersionToGitIdentifier(currentVersion);
      const commitB = nuxtVersionToGitIdentifier(upgradedVersion);
      if (commitA && commitB) {
        consola.info("Changelog:", `https://github.com/nuxt/framework/compare/${commitA}...${commitB}`);
      }
    }
  }
});

export { upgrade as default };
