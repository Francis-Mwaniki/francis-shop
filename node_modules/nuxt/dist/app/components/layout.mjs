import { defineComponent, isRef, nextTick, onMounted, Transition } from "vue";
import { _wrapIf } from "./utils.mjs";
import { useRoute } from "#app";
import layouts from "#build/layouts";
import { appLayoutTransition as defaultLayoutTransition } from "#build/nuxt.config.mjs";
export default defineComponent({
  props: {
    name: {
      type: [String, Boolean, Object],
      default: null
    }
  },
  setup(props, context) {
    const route = useRoute();
    let vnode;
    let _layout;
    if (process.dev && process.client) {
      onMounted(() => {
        nextTick(() => {
          if (_layout && ["#comment", "#text"].includes(vnode?.el?.nodeName)) {
            console.warn(`[nuxt] \`${_layout}\` layout does not have a single root node and will cause errors when navigating between routes.`);
          }
        });
      });
    }
    return () => {
      const layout = (isRef(props.name) ? props.name.value : props.name) ?? route.meta.layout ?? "default";
      const hasLayout = layout && layout in layouts;
      if (process.dev && layout && !hasLayout && layout !== "default") {
        console.warn(`Invalid layout \`${layout}\` selected.`);
      }
      const transitionProps = route.meta.layoutTransition ?? defaultLayoutTransition;
      return _wrapIf(Transition, hasLayout && transitionProps, {
        default: () => {
          if (process.dev && process.client && transitionProps) {
            _layout = layout;
            vnode = _wrapIf(layouts[layout], hasLayout, context.slots).default();
            return vnode;
          }
          return _wrapIf(layouts[layout], hasLayout, context.slots).default();
        }
      }).default();
    };
  }
});
